Bindings:
:: âˆ€ sk_0_a sk_1_b. (sk_0_a â†’  sk_1_b) â†’  List sk_0_a â†’  List sk_1_b
  [4mmap f lst =[0m
  [4m  case lst of[0m
  [4m    Nil -> Nil[0m
  [4m    Cons x xs -> Cons (f x) (map f xs)[0m
:: sk_0_a â†’  sk_1_b
  map [4mf[0m lst =
:: List sk_0_a
  map f [4mlst[0m =
:: sk_0_a
      Cons [4mx[0m xs -> Cons (f x) (map f xs)
:: List sk_0_a
      Cons x [4mxs[0m -> Cons (f x) (map f xs)

Proofs:
coercion: (âˆ€ a. List a) @ sk_1_b
      Nil -> [4mNil[0m
coercion: (âˆ€ a. a â†’  List a â†’  List a) @ sk_1_b
      Cons x xs -> [4mCons[0m (f x) (map f xs)
coercion: (âˆ€ a b. (a â†’  b) â†’  List a â†’  List b) @ sk_0_a sk_1_b
      Cons x xs -> Cons (f x) ([4mmap[0m f xs)
